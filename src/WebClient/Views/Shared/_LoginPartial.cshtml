@using Microsoft.AspNetCore.Identity
@using UseCase.Shared
@using UseCase.Users.GetSignInInfo
@using WebClient.Models.Todos
@inject SignInManager<IdentityUser> _signInManager
@inject UserManager<IdentityUser> _userManager
@inject IUserGetSignInInfoQueryService _userGetSignInInfoQueryService
@{
    var userId = _signInManager.IsSignedIn(User)
        ? _userManager.GetUserId(User)
        : null;
    var result = userId != null 
        ? await _userGetSignInInfoQueryService.ExecuteAsync(
            command: new UserGetSignInInfoCommand(
                userSession: new UserSession(userId))) 
        : null;

    var nickname = result?.SignInInfo?.Nickname;
}

<ul class="navbar-nav">
@if (_signInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <form asp-controller="Todo" asp-action="Index" method="get">
            <div class="input-group">
                @{
                    var queries = Context.Request.Query.ToDictionary(
                        x => x.Key,
                        x => x.Value.ToString());

                    if (queries.ContainsKey(nameof(TodoViewModel.PageNum)))
                    {
                        queries[nameof(TodoViewModel.PageNum)] = "1";
                    }
                    else
                    {
                        queries.Add(nameof(TodoViewModel.PageNum), "1");
                    }

                    var keyword = queries.ContainsKey(nameof(TodoViewModel.Keyword)) ? queries[nameof(TodoViewModel.Keyword)] : "";

                    queries.Remove(nameof(TodoViewModel.PostInputModel));
                    queries.Remove(nameof(TodoViewModel.CompleteInputModel));
                    queries.Remove(nameof(TodoViewModel.TodoDetailsViewModel));

                    queries.Remove(nameof(TodoViewModel.Keyword));
                    queries.Remove(nameof(TodoViewModel.Id));
                    queries.Remove(nameof(TodoViewModel.ShowDetails));

                    foreach (var (key, value) in queries)
                    {
                        <input type="hidden" name="@key" value="@value" />
                    }
                }
                <input type="search" name="@nameof(TodoViewModel.Keyword)" class="form-control" value="@keyword" placeholder="キーワードを入力" aria-label="キーワード検索" aria-describedby="searchTodo" />
                <button class="btn btn-outline-secondary" type="submit" id="searchTodo">検索</button>
            </div>
        </form>
    </li>
    <li class="nav-item">
        <div class="dropdown">
            <span class="dropdown-toggle btn" id="userMenu" data-bs-toggle="dropdown" aria-expanded="false">@nickname</span>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userMenu">
                <li class="dropdown-item">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-gear"></i>
                        <a class="btn" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">アカウント設定</a>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-box-arrow-right"></i>
                        <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                            <button type="submit" class="btn">ログアウト</button>
                        </form>
                    </div>
                </li>
            </ul>
        </div>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">新規ユーザー登録</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">ログイン</a>
    </li>
}
</ul>
